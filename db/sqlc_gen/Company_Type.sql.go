// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: Company_Type.sql

package apollo

import (
	"context"
)

const createCompanyType = `-- name: CreateCompanyType :one
SELECT company_type_id, company_type_name, description, created_at FROM research.fn_ins_company_type($1, $2)
`

type CreateCompanyTypeParams struct {
	PCompanyTypeName string `json:"p_company_type_name"`
	PDescription     string `json:"p_description"`
}

func (q *Queries) CreateCompanyType(ctx context.Context, arg CreateCompanyTypeParams) (ResearchCompanyType, error) {
	row := q.db.QueryRowContext(ctx, createCompanyType, arg.PCompanyTypeName, arg.PDescription)
	var i ResearchCompanyType
	err := row.Scan(
		&i.CompanyTypeID,
		&i.CompanyTypeName,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const deleteCompanyType = `-- name: DeleteCompanyType :exec
CALL research.fn_del_company_type($1)
`

func (q *Queries) DeleteCompanyType(ctx context.Context, pID int32) error {
	_, err := q.db.ExecContext(ctx, deleteCompanyType, pID)
	return err
}

const getCompanyType = `-- name: GetCompanyType :one
SELECT company_type_id, company_type_name, description, created_at FROM research.fn_get_company_type($1)
`

func (q *Queries) GetCompanyType(ctx context.Context, pID int32) (ResearchCompanyType, error) {
	row := q.db.QueryRowContext(ctx, getCompanyType, pID)
	var i ResearchCompanyType
	err := row.Scan(
		&i.CompanyTypeID,
		&i.CompanyTypeName,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const listCompanyTypes = `-- name: ListCompanyTypes :many
SELECT company_type_id, company_type_name, description, created_at FROM research.fn_list_company_type()
`

func (q *Queries) ListCompanyTypes(ctx context.Context) ([]ResearchCompanyType, error) {
	rows, err := q.db.QueryContext(ctx, listCompanyTypes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ResearchCompanyType
	for rows.Next() {
		var i ResearchCompanyType
		if err := rows.Scan(
			&i.CompanyTypeID,
			&i.CompanyTypeName,
			&i.Description,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCompanyType = `-- name: UpdateCompanyType :one
SELECT company_type_id, company_type_name, description, created_at FROM research.fn_upd_company_type($1, $2, $3)
`

type UpdateCompanyTypeParams struct {
	PID   int32  `json:"p_id"`
	PName string `json:"p_name"`
	PDesc string `json:"p_desc"`
}

func (q *Queries) UpdateCompanyType(ctx context.Context, arg UpdateCompanyTypeParams) (ResearchCompanyType, error) {
	row := q.db.QueryRowContext(ctx, updateCompanyType, arg.PID, arg.PName, arg.PDesc)
	var i ResearchCompanyType
	err := row.Scan(
		&i.CompanyTypeID,
		&i.CompanyTypeName,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}
