// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: Company.sql

package apollo

import (
	"context"
)

const createCompany = `-- name: CreateCompany :one
SELECT company_id, company_type_id, parent_company_id, company_name, created_at FROM research.fn_ins_company($1, $2, $3)
`

type CreateCompanyParams struct {
	PcompanyTypeID int32  `json:"pcompany_type_id"`
	PcID           int32  `json:"pc_id"`
	PcName         string `json:"pc_name"`
}

func (q *Queries) CreateCompany(ctx context.Context, arg CreateCompanyParams) (ResearchCompany, error) {
	row := q.db.QueryRowContext(ctx, createCompany, arg.PcompanyTypeID, arg.PcID, arg.PcName)
	var i ResearchCompany
	err := row.Scan(
		&i.CompanyID,
		&i.CompanyTypeID,
		&i.ParentCompanyID,
		&i.CompanyName,
		&i.CreatedAt,
	)
	return i, err
}

const deleteCompany = `-- name: DeleteCompany :exec
CALL research.fn_del_company($1)
`

func (q *Queries) DeleteCompany(ctx context.Context, pID int32) error {
	_, err := q.db.ExecContext(ctx, deleteCompany, pID)
	return err
}

const getCompany = `-- name: GetCompany :one
SELECT company_id, company_type_id, parent_company_id, company_name, created_at FROM research.fn_get_company($1)
`

func (q *Queries) GetCompany(ctx context.Context, pID int32) (ResearchCompany, error) {
	row := q.db.QueryRowContext(ctx, getCompany, pID)
	var i ResearchCompany
	err := row.Scan(
		&i.CompanyID,
		&i.CompanyTypeID,
		&i.ParentCompanyID,
		&i.CompanyName,
		&i.CreatedAt,
	)
	return i, err
}

const listCompanies = `-- name: ListCompanies :many
SELECT company_id, company_type_id, parent_company_id, company_name, created_at FROM research.fn_list_company()
`

func (q *Queries) ListCompanies(ctx context.Context) ([]ResearchCompany, error) {
	rows, err := q.db.QueryContext(ctx, listCompanies)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ResearchCompany
	for rows.Next() {
		var i ResearchCompany
		if err := rows.Scan(
			&i.CompanyID,
			&i.CompanyTypeID,
			&i.ParentCompanyID,
			&i.CompanyName,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCompany = `-- name: UpdateCompany :one
SELECT company_id, company_type_id, parent_company_id, company_name, created_at FROM research.fn_upd_company($1, $2, $3, $4)
`

type UpdateCompanyParams struct {
	PCompanyID       int32  `json:"p_company_id"`
	PCompanyTypeID   int32  `json:"p_company_type_id"`
	PParentCompanyID int32  `json:"p_parent_company_id"`
	PCompanyName     string `json:"p_company_name"`
}

func (q *Queries) UpdateCompany(ctx context.Context, arg UpdateCompanyParams) (ResearchCompany, error) {
	row := q.db.QueryRowContext(ctx, updateCompany,
		arg.PCompanyID,
		arg.PCompanyTypeID,
		arg.PParentCompanyID,
		arg.PCompanyName,
	)
	var i ResearchCompany
	err := row.Scan(
		&i.CompanyID,
		&i.CompanyTypeID,
		&i.ParentCompanyID,
		&i.CompanyName,
		&i.CreatedAt,
	)
	
	return i, err
}
