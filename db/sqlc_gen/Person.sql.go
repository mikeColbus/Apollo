// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: Person.sql

package apollo

import (
	"context"
)

const createPerson = `-- name: CreatePerson :one
SELECT person_id, first_name, last_name, primary_phone, primary_email, created_at FROM research.fn_ins_person($1, $2, $3, $4)
`

type CreatePersonParams struct {
	PFirstName    string `json:"p_first_name"`
	PLastName     string `json:"p_last_name"`
	PPrimaryPhone string `json:"p_primary_phone"`
	PPrimaryEmail string `json:"p_primary_email"`
}

func (q *Queries) CreatePerson(ctx context.Context, arg CreatePersonParams) (ResearchPerson, error) {
	row := q.db.QueryRowContext(ctx, createPerson,
		arg.PFirstName,
		arg.PLastName,
		arg.PPrimaryPhone,
		arg.PPrimaryEmail,
	)
	var i ResearchPerson
	err := row.Scan(
		&i.PersonID,
		&i.FirstName,
		&i.LastName,
		&i.PrimaryPhone,
		&i.PrimaryEmail,
		&i.CreatedAt,
	)
	return i, err
}

const deletePerson = `-- name: DeletePerson :exec
CALL research.fn_del_person($1)
`

func (q *Queries) DeletePerson(ctx context.Context, pID int32) error {
	_, err := q.db.ExecContext(ctx, deletePerson, pID)
	return err
}

const getPerson = `-- name: GetPerson :one
SELECT person_id, first_name, last_name, primary_phone, primary_email, created_at FROM research.fn_get_person($1)
`

func (q *Queries) GetPerson(ctx context.Context, pID int32) (ResearchPerson, error) {
	row := q.db.QueryRowContext(ctx, getPerson, pID)
	var i ResearchPerson
	err := row.Scan(
		&i.PersonID,
		&i.FirstName,
		&i.LastName,
		&i.PrimaryPhone,
		&i.PrimaryEmail,
		&i.CreatedAt,
	)
	return i, err
}

const listPerson = `-- name: ListPerson :many
SELECT person_id, first_name, last_name, primary_phone, primary_email, created_at FROM research.fn_list_person()
`

func (q *Queries) ListPerson(ctx context.Context) ([]ResearchPerson, error) {
	rows, err := q.db.QueryContext(ctx, listPerson)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ResearchPerson
	for rows.Next() {
		var i ResearchPerson
		if err := rows.Scan(
			&i.PersonID,
			&i.FirstName,
			&i.LastName,
			&i.PrimaryPhone,
			&i.PrimaryEmail,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePerson = `-- name: UpdatePerson :one
SELECT person_id, first_name, last_name, primary_phone, primary_email, created_at FROM research.fn_upd_person($1, $2, $3, $4, $5)
`

type UpdatePersonParams struct {
	PPersonID     int32  `json:"p_person_id"`
	PFirstName    string `json:"p_first_name"`
	PLastName     string `json:"p_last_name"`
	PPrimaryPhone string `json:"p_primary_phone"`
	PPrimaryEmail string `json:"p_primary_email"`
}

func (q *Queries) UpdatePerson(ctx context.Context, arg UpdatePersonParams) (ResearchPerson, error) {
	row := q.db.QueryRowContext(ctx, updatePerson,
		arg.PPersonID,
		arg.PFirstName,
		arg.PLastName,
		arg.PPrimaryPhone,
		arg.PPrimaryEmail,
	)
	var i ResearchPerson
	err := row.Scan(
		&i.PersonID,
		&i.FirstName,
		&i.LastName,
		&i.PrimaryPhone,
		&i.PrimaryEmail,
		&i.CreatedAt,
	)
	return i, err
}
